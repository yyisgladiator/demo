package abp;

component Sender {

  port
    in Integer i,
    in Boolean as,
    out Pair<Integer,Boolean> ds;

  automaton Sender {
    variable List<Integer> buffer=new List<>();

    state St, Sf;
    initial Sf / {ds=null};

    Sf -> Sf [buffer.size()=0] {i=null, as!=null} / {ds=null};
    Sf -> St [buffer.size()=1 && as=false] {i=null, as!=null} / {buffer=buffer.butlast(), ds=null};
    Sf -> St [buffer.size()>1 && as=false] {i=null, as!=null} / {buffer=buffer.butlast(), ds=new Pair<>(buffer.butlast().last(),true)};
    Sf -> Sf [buffer.size()=0] {i=null, as=null} / {ds=null};
    Sf -> Sf [buffer.size()>0] {i=null, as=null} / {ds=new Pair<>(buffer.last(),false)};
    Sf -> Sf [buffer.size()>0 && as=true] {i=null, as!=null} / {ds=new Pair<>(buffer.last(),false)};
    Sf -> St [buffer.size()>1 && as=false] {i!=null, as!=null} / {buffer=buffer.butlast().prepend(i), ds=new Pair<>(buffer.butlast().last(),true)};
    Sf -> St [buffer.size()=1 && as=false] {i!=null, as!=null} / {buffer=buffer.butlast().prepend(i), ds=new Pair<>(i,true)};
    Sf -> Sf [buffer.size()=0] {i!=null, as!=null} / {buffer=buffer.prepend(i), ds=new Pair<>(i,false)};
    Sf -> Sf [buffer.size()=0] {i!=null, as=null} / {buffer=buffer.prepend(i), ds=new Pair<>(i,false)};
    Sf -> Sf [buffer.size()>0 && as=true] {i!=null, as!=null} / {buffer=buffer.prepend(i), ds=new Pair<>(buffer.last(),false)};
    Sf -> Sf [buffer.size()>0] {i!=null, as=null} / {buffer=buffer.prepend(i), ds=new Pair<>(buffer.last(),false)};
    St -> St [buffer.size()=0] {i=null, as=null} / {ds=null};
    St -> St [buffer.size()=0] {i=null, as!=null} / {ds=null};
    St -> St [buffer.size()>0] {i=null, as=null} / {ds=new Pair<>(buffer.last(),true)};
    St -> St [buffer.size()>0 && as=false] {i=null, as!=null} / {ds=new Pair<>(buffer.last(),true)};
    St -> St [buffer.size()=0] {i!=null, as=null} / {buffer=buffer.prepend(i), ds=new Pair<>(i,true)};
    St -> St [buffer.size()=0] {i!=null, as!=null} / {buffer=buffer.prepend(i), ds=new Pair<>(i,true)};
    St -> St [buffer.size()>0] {i!=null, as=null} / {buffer=buffer.prepend(i), ds=new Pair<>(buffer.last(),true)};
    St -> St [buffer.size()>0 && as=false] {i!=null, as!=null} / {buffer=buffer.prepend(i), ds=new Pair<>(buffer.last(),true)};
    St -> Sf [buffer.size()>1 && as=true] {i!=null, as!=null} / {buffer=buffer.butlast().prepend(i), ds=new Pair<>(buffer.butlast().last(),false)};
    St -> Sf [buffer.size()=1 && as=true] {i!=null, as!=null} / {buffer=buffer.butlast().prepend(i), ds=new Pair<>(i,false)};
    St -> Sf [buffer.size()=1 && as=true] {i=null, as!=null} / {buffer=buffer.butlast(), ds=null};
    St -> Sf [buffer.size()>1 && as=true] {i=null, as!=null} / {buffer=buffer.butlast(), ds=new Pair<>(buffer.butlast().last(),false)};
  }
}